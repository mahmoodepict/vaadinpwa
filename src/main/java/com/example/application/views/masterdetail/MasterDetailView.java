package com.example.application.views.masterdetail;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.example.application.backend.BackendService;
import com.example.application.backend.Employee;
import com.vaadin.flow.component.Tag;
import com.vaadin.flow.component.dependency.JsModule;
import com.vaadin.flow.component.polymertemplate.PolymerTemplate;
import com.vaadin.flow.router.AfterNavigationEvent;
import com.vaadin.flow.router.AfterNavigationObserver;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.router.RouteAlias;
import com.vaadin.flow.templatemodel.TemplateModel;

import com.example.application.MainView;
import com.example.application.views.masterdetail.MasterDetailView.MasterDetailViewModel;

@Route(value = "masterdetail", layout = MainView.class)
@RouteAlias(value = "", layout = MainView.class)
@PageTitle("MasterDetail")
@JsModule("src/views/masterdetail/master-detail-view.js")
@Tag("master-detail-view")
public class MasterDetailView extends PolymerTemplate<MasterDetailViewModel>
        implements AfterNavigationObserver {

    // This is the Java companion file of a design
    // You can find the design in /frontend/src/views/src/views/masterdetail/master-detail-view.js
    // The design can be easily edited by using Vaadin Designer (vaadin.com/designer)

    /**
     * All data we send to the client (template). Implementation is generated by the
     * framework.
     */
    public static interface MasterDetailViewModel extends TemplateModel {
        public void setPersons(List<Employee> items);
    }

    @Autowired
    private BackendService service;

    public MasterDetailView() {
    }

    @Override
    public void afterNavigation(AfterNavigationEvent event) {
        // Lazy init of the grid items, happens only when we are sure the view will be
        // shown to the user

        // In this class we use the TemplateModel to populate data since we don't need
        // to reference the Grid in Java code. For that, please see MasterDetailView
        getModel().setPersons(service.getEmployees());
    }
}
